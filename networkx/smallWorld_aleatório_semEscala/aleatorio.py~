import networkx as nx
from numpy import *
import matplotlib.pyplot as plt

def imprimir_grafo(grafo):
	for x in grafo:
		print(x,grafo[x])

def CaminhoExiste(G,no1,no2):
	try:
		sp = nx.shortest_path(G,no1,no2)
	except nx.NetworkXNoPath:
		return False
	return True

def distancia(grafo):
	total=0
	contador=0
	SomaEfi=0
	for x in grafo:
		for y in grafo:
			if y!=x:
				if(CaminhoExiste(grafo,x,y)):
					#encontrar o caminho caminho mais curto entre um par de nós
					vetor=nx.dijkstra_path(grafo,x,y)
					soma=0.0
					for num in range(len(vetor)-1):
						numero1=vetor[num]
						numero2=vetor[num+1]
						#distancia do percurso
						soma=soma+1
				else:
					soma=1000000000000000000
				contador=contador+1
				#soma das eficiencias(cada par de nós possue apenas uma)
				SomaEfi=SomaEfi+(1/soma)
				#soma das distância
				total=total+soma
	dist=(total/contador)
	print("Distancia média: %.2f"%dist)
	print("Eficiencia média: %.2f"%(SomaEfi/contador))

def varias_probabilidades(n):
	quant=100 
	p=0.01
	valoresP=dict()
	eixoX=list()
	eixoY=list()
	while(p<=0.1):
		eixoX.append(p) #pego o valor de p que eu irei comparar 100 vezes(quant)
		soma=0
		for x in range(quant):
			grafo_aleatorio = nx.gnp_random_graph(n,p)
			if (nx.is_connected(grafo_aleatorio)):
				soma=soma+1 #conto quantos grafos são conexos
		eixoY.append(soma)
		valoresP[p]=soma
		p=p+0.01
	legenda="Para %d nós"%n
	plt.plot(eixoX, eixoY,label=legenda)
	plt.xlabel("Probabilidade de encontrar uma aresta")
	plt.ylabel("Porcentagem")
	plt.legend()




quantNos=50
valores=dict()
while (quantNos<=200):
	print("\nCálculo para %d nos..."%quantNos)
	grafo_aleatorio = nx.gnp_random_graph(quantNos,0.1)
	if (nx.is_connected(grafo_aleatorio)):
		distancia(grafo_aleatorio)
		#varias_probabilidades(quantNos)
		quantNos=quantNos+50


plt.show()
#grafico(valores)
